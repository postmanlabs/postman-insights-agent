package learn

import (
	"strconv"

	pb "github.com/akitasoftware/akita-ir/go/api_spec"
	"github.com/akitasoftware/akita-libs/akid"
	"github.com/google/uuid"
)

var (
	// Namespace for witness IDs generated by CLI observation of TCP packets.
	tcpWitnessSpace = uuid.Must(uuid.Parse("e7c24637-ccbd-4f16-9d0d-851d1348ba6b"))
)

// A partial witness is a witness that only includes the argument or response.
// It represents a raw observation from a TCP flow and should be paired up with
// the corresponding observation from the opposite flow in the same TCP stream.
type PartialWitness struct {
	Witness *pb.Witness

	// Key used to pair this PartialWitness up with its counterpart.
	PairKey akid.WitnessID
}

// Generates a v5 UUID as witness ID based on stream ID and seq.
func ToWitnessID(streamID uuid.UUID, seq int) akid.WitnessID {
	return akid.NewWitnessID(uuid.NewSHA1(tcpWitnessSpace, []byte(streamID.String()+":"+strconv.Itoa(seq))))
}

func toWitnessID(streamID uuid.UUID, seq int) akid.WitnessID {
	return ToWitnessID(streamID, seq)
}
